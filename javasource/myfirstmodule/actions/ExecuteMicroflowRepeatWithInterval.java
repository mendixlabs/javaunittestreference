// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import java.time.Duration;
import static java.time.Instant.now;
import java.util.Date;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

public class ExecuteMicroflowRepeatWithInterval extends CustomJavaAction<java.lang.Void>
{
	private java.lang.String MicroflowReference;
	private java.lang.Long DelayMs;
	private java.lang.Long MaximumDurationMs;

	public ExecuteMicroflowRepeatWithInterval(IContext context, java.lang.String MicroflowReference, java.lang.Long DelayMs, java.lang.Long MaximumDurationMs)
	{
		super(context);
		this.MicroflowReference = MicroflowReference;
		this.DelayMs = DelayMs;
		this.MaximumDurationMs = MaximumDurationMs;
	}

	@java.lang.Override
	public java.lang.Void executeAction() throws Exception
	{
		// BEGIN USER CODE
                doScheduleMicroflow(getContext(), MaximumDurationMs, DelayMs, MicroflowReference);
                return null;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExecuteMicroflowRepeatWithInterval";
	}

	// BEGIN EXTRA CODE
        
        private static final ILogNode LOG = Core.getLogger("MyFirstModule");
        /**
         * 
         * @param context       the user action context
         * @param maxDurationMs The number of milliseconds after which the repeated
         *                      execution should be finished
         * @param delayMs       The delay between scheduled executions
         * @param mfToSchedule  The microflow to be executed
         * @throws InterruptedException
         * @throws TimeoutException
         * @throws ExecutionException
         */
        public static void doScheduleMicroflow(IContext context, long maxDurationMs, long delayMs, String mfToSchedule)
                throws CoreException, InterruptedException, ExecutionException, TimeoutException {

            if (delayMs >= maxDurationMs) {
                LOG.warn("Delay is greater than max duration, not scheduling requested microflow");
                return;
            }

            var maxDuration = Duration.ofMillis(maxDurationMs - delayMs);
            // subtract the delay, so that we don't exceed the maximum duration
            var start = now();
            while (Duration.between(start, now()).compareTo(maxDuration) < 0) {

                var future = Core.schedule(mfToSchedule, Date.from(now().plusMillis(delayMs)));
                LOG.debug(String.format("microflow %s scheduled", mfToSchedule));

                future.get(maxDurationMs, TimeUnit.MILLISECONDS);
                // blocks until result is ready

            }
        }
	// END EXTRA CODE
}
